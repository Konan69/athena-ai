/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthenticatedLibraryRouteImport } from './routes/_authenticated/library'
import { Route as AuthenticatedChatRouteImport } from './routes/_authenticated/chat'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as AuthenticatedLibraryIndexRouteImport } from './routes/_authenticated/library/index'

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedLibraryRoute = AuthenticatedLibraryRouteImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedChatRoute = AuthenticatedChatRouteImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)
const AuthenticatedLibraryIndexRoute =
  AuthenticatedLibraryIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedLibraryRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof AuthLoginRoute
  '/chat': typeof AuthenticatedChatRoute
  '/library': typeof AuthenticatedLibraryRouteWithChildren
  '/': typeof AuthenticatedIndexRoute
  '/library/': typeof AuthenticatedLibraryIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof AuthLoginRoute
  '/chat': typeof AuthenticatedChatRoute
  '/': typeof AuthenticatedIndexRoute
  '/library': typeof AuthenticatedLibraryIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteWithChildren
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_authenticated/chat': typeof AuthenticatedChatRoute
  '/_authenticated/library': typeof AuthenticatedLibraryRouteWithChildren
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/library/': typeof AuthenticatedLibraryIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/chat' | '/library' | '/' | '/library/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/chat' | '/' | '/library'
  id:
    | '__root__'
    | '/_auth'
    | '/_authenticated'
    | '/_auth/login'
    | '/_authenticated/chat'
    | '/_authenticated/library'
    | '/_authenticated/'
    | '/_authenticated/library/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/library': {
      id: '/_authenticated/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof AuthenticatedLibraryRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/chat': {
      id: '/_authenticated/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof AuthenticatedChatRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_authenticated/library/': {
      id: '/_authenticated/library/'
      path: '/'
      fullPath: '/library/'
      preLoaderRoute: typeof AuthenticatedLibraryIndexRouteImport
      parentRoute: typeof AuthenticatedLibraryRoute
    }
  }
}

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface AuthenticatedLibraryRouteChildren {
  AuthenticatedLibraryIndexRoute: typeof AuthenticatedLibraryIndexRoute
}

const AuthenticatedLibraryRouteChildren: AuthenticatedLibraryRouteChildren = {
  AuthenticatedLibraryIndexRoute: AuthenticatedLibraryIndexRoute,
}

const AuthenticatedLibraryRouteWithChildren =
  AuthenticatedLibraryRoute._addFileChildren(AuthenticatedLibraryRouteChildren)

interface AuthenticatedRouteChildren {
  AuthenticatedChatRoute: typeof AuthenticatedChatRoute
  AuthenticatedLibraryRoute: typeof AuthenticatedLibraryRouteWithChildren
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedChatRoute: AuthenticatedChatRoute,
  AuthenticatedLibraryRoute: AuthenticatedLibraryRouteWithChildren,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
